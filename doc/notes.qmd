---
title: "Draft Quarto document"
author: "Your Name"
format: html
---

## Day 1 - Basic statistics

```{r setup}
#| include: false
library(tidyverse)
source(here::here("R/functions.R"))
lipidomics <- read_csv(here::here("data/lipidomics.csv"))

descriptive_stats(lipidomics)
```

```{r}
#' For each metabolite calculates descriptive statistics
#'
#' @param data The lipidomics data
#'
#' @return A data.frame/tibble

descriptive_stats <- function(data) {
  data %>%
    dplyr::group_by(metabolite) %>%
    dplyr::summarise(dplyr::across( # given these columns do these actions
      value,
      list(
        mean = mean,
        sd = sd
      )
    )) %>%
    dplyr::mutate(dplyr::across(
      tidyselect::where(is.numeric),
      ~ round(.x, digits = 1)
    ))
  return(data)
}
```

## Day 2 - Figure outputs

> targets::tar_visnetwork()

displays on Viewer ; triangles are functions and circles the other
things

when black means that it is up to date

> targets::tar_outdated()

if character(0) means that no changes to target have been made

To add package to DESCRIPTION do use_package("ggplot2")

```{r}
metabolite_distribution_plot <- ggplot(lipidomics, aes(x = value)) +
  geom_histogram() +
  facet_wrap(vars(metabolite), scales = "free")
metabolite_distribution_plot
```

### Important!!!

When we use targets::tar_config_set(store = ...), it will create a new
file in the doc/ folder called \_targets.yaml that contains details for
telling targets where to find the store. Since the path listed in this
new file is an absolute path, it will only ever work on your own
computer. So, it improve reproducibility, it’s good practice to not put
it into the Git history and instead put it in the .gitignore file. So
let’s add it to ignore file by using:

Console use_git_ignore("doc/\_targets.yaml")

## Basic statistics

```{r}
# descriptive_stats(lipidomics)
tar_read(df_stats_by_metabolite)
```

## Figure outputs

```{r}
# plot_distributions(lipidomics)
tar_read(fig_metabolite_distribution)
```

## Building the model

```{r}
log_reg_specs <- logistic_reg()|>
  set_engine("glm")
log_reg_specs
```

```{r}
lipidomics |>
    count(code, metabolite) |>
    filter(n > 1)
# 36 individuals have cholesterol measured 3 times
```

```{r}
lipidomics_wide <- lipidomics |>
    # to make sure that the characters are understandable for the program
  mutate(metabolite = snakecase::to_snake_case(metabolite)) |>
  pivot_wider(
    names_from = metabolite, # will place mtb in columns
    values_from = value, # values per individual per mtb 
    values_fn = mean, # this will average whenever there are multiple measurements per mtb - i.e. cholesterol
    names_prefix = "metabolite_"
  )
lipidomics_wide
```

```{r}
column_values_to_snake_case <- function(data) {
  data |>
    dplyr::mutate(metabolite = snakecase::to_snake_case(metabolite))
}
lipidomics |>
  column_values_to_snake_case()
```

```{r}
column_values_to_snake_case <- function(data, columns) {
  data |>
    dplyr::mutate(dplyr::across({{ columns }}, snakecase::to_snake_case))
}

lipidomics |>
  column_values_to_snake_case(metabolite)
```

```{r}
lipidomics_wide <- lipidomics |>
  mutate(metabolite = snakecase::to_snake_case(metabolite)) |>
  pivot_wider(
    names_from = metabolite, # will place mtb in columns
    values_from = value, # values per individual per mtb 
    values_fn = mean, # this will average whenever there are multiple measurements per mtb - i.e. cholesterol
    names_prefix = "metabolite_"
  )
lipidomics_wide
```

```{r}
lipidomics_wide <- lipidomics |>
    # to make sure that the characters are understandable for the program
  # mutate(metabolite = snakecase::to_snake_case(metabolite)) |>
    # can be replaced onced function column_values_to_snake_case has been created
  column_values_to_snake_case(metabolite) |>
  pivot_wider(
    names_from = metabolite, # will place mtb in columns
    values_from = value, # values per individual per mtb 
    values_fn = mean, # this will average whenever there are multiple measurements per mtb - i.e. cholesterol
    names_prefix = "metabolite_"
  )
lipidomics_wide
```

```{r}
metabolites_to_wider <- function(data) {
  data |>
    tidyr::pivot_wider(
    names_from = metabolite, 
    values_from = value, 
    values_fn = mean, 
    names_prefix = "metabolite_"
  )
}
```

```{r}
lipidomics_wide <- lipidomics |>
  column_values_to_snake_case(metabolite) |>
  metabolites_to_wider()
lipidomics_wide
```

### Interesting --- look what the following normalizations are

recipes::step_log() --\> mean 0 sd 1 recipes::step_scale()
recipes::step_normalize() recipes::step_center() recipes::step_sqrt()

## continuation

```{r}
log_reg_specs <- logistic_reg() |>
  set_engine("glm")

log_reg_specs
```

```{r}
lipidomics_wide <- lipidomics |>
  column_values_to_snake_case(metabolite) |>
  metabolites_to_wider()

lipidomics_wide
```

```{r}
recipe_specs <- lipidomics_wide |> 
    create_recipe_spec(metabolite_cholesterol)

recipe_specs
```

```{r}
workflow() |> 
    add_model(log_reg_specs) |> 
    add_recipe(recipe_specs) 
```

```{r}
model_workflow <- create_model_workflow(
  logistic_reg() |>
    set_engine("glm"),
  lipidomics_wide |>
    create_recipe_spec(metabolite_cholesterol)
)
model_workflow
```

```{r}
model_workflow <- create_model_workflow(
  logistic_reg() |>
    set_engine("glm"),
  lipidomics_wide |>
    create_recipe_spec(metabolite_cholesterol)
) |>
  fit(lipidomics_wide) |>
  tidy_model_output()
model_workflow
```

```{r}
fitted_model <- model_workflow |>
  fit(lipidomics_wide)
fitted_model
```

```{r}
fitted_model |>
  extract_fit_parsnip() |>
  tidy(exponentiate = TRUE)
```

## Day 3

```{r}
# map needs a long dataset 
lipidomics |> 
    column_values_to_snake_case(metabolite) |> 
    group_split(metabolite) |> 
    map(metabolites_to_wider) 
```

```{r}
#' Calculate the estimates for the model for each metabolite.
#'
#' @param data The lipidomics dataset.
#'
#' @return A data frame.
#'
calculate_estimates <- function(data)
    data |>
    split_by_metabolite() |>
    purrr::map(generate_model_results) |>
    purrr::list_rbind() |>
    dplyr::filter(stringr::str_detect(term, "metabolite_")) # to keep only the metabolites
```

```{r}
lipidomics |> 
    dplyr::select(metabolite) |> 
    dplyr::mutate(term = metabolite) |> 
    column_values_to_snake_case(term) |> 
    dplyr::mutate(term = str_c("metabolite_", term)) |> # string concatenate to concatenate 2 strings together
    dplyr::distinct(term, metabolite) |> # different mtb and term
    dplyr::right_join(model_estimates, by = "term")
```
